from typing import Self

from pydantic import BaseModel, Field, model_validator

"""
Initially generated by datamodel-codegen:
timestamp: 2025-07-06T22:18:46+00:00

Generated by command:
# datamodel-codegen --input vault.json --input-file-type json --output response_modelv3.py --output-model-type pydantic_v2.BaseModel --use-generic-container-types --use-standard-collections --use-annotated --use-union-operator  --reuse-model --use-double-quotes --force-optional

We've since added the default_*_factory functions and other features
for usability and reliability enhancements
"""  # noqa: E501


def default_related_factory():
    instance: Related = Related()
    return instance


def default_alienvault_factory():
    instance: Alienvault = Alienvault()
    return instance


def default_pulse_info_factory():
    instance: PulseInfo = PulseInfo()
    return instance


def default_other_factory():
    instance: Other = Other()
    return instance


class MalwareFamily(BaseModel):
    id: str = ""
    display_name: str = ""


class Pulse(BaseModel, extra="ignore"):
    id: str | None = None
    name: str = "Unknown"
    description: str = ""
    created: str = ""
    references: list[str] = Field(default_factory=list)
    adversary: str = ""
    malware_families: list[MalwareFamily] = Field(default_factory=list)


class Alienvault(BaseModel, extra="ignore"):
    adversary: list[str] = Field(default_factory=list)
    malware_families: list[str] = Field(default_factory=list)


class Other(BaseModel, extra="ignore"):
    adversary: list[str] = Field(default_factory=list)
    malware_families: list[str] = Field(default_factory=list)


class Related(BaseModel, extra="ignore"):
    alienvault: Alienvault = Field(default_factory=default_alienvault_factory)
    other: Other = Field(default_factory=default_other_factory)


class PulseInfo(BaseModel, extra="ignore"):
    count: int = 0
    pulses: list[Pulse] = Field(default_factory=list)
    references: list[str] = Field(default_factory=list)
    related: Related = Field(default_factory=default_related_factory)

    @model_validator(mode="after")
    def _model_validator(self) -> Self:
        self.count = len(self.pulses)
        return self


class OTXReport(BaseModel, extra="ignore"):
    indicator: str
    pulse_info: PulseInfo = Field(default_factory=default_pulse_info_factory)
